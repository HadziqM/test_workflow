---
import Icon from "./Icon.astro";
import type {Props as IconProps} from "./Icon.astro";
import ThemeTogle from "./ThemeTogle.astro";

interface Props{
  displayed?:boolean
}

interface List {
  label:string,
  href:string
}

const pageList:List[] = [
  {label:"Home" ,href:"/"},
  {label:"Dashboard" ,href:"/project"},
  {label:"Contact" ,href:"/portofolio"},
]

const iconList: {label:string,href:string,icon:IconProps["icon"]}[] = [
  {label:"Github", href:"https://github.com/HadziqM", icon:"github-logo"},
  {label:"Linkedin", href:"https://www.linkedin.com/in/hadziq-masfuh-554177197", icon:"linkedin-logo"},
  {label:"Youtube", href:"https://www.youtube.com/@dimashadziq6007", icon:"youtube-logo"}
]

const sideList:{label:string,href:string,items:List[],icon:string}[] =[
  {label:"Main",href:"/dashboard",items:[],icon:"home"},
  {label:"Report",href:"",icon:"chart",items:[
    {label:"Ultrasonic",href:"/dashboard/report/ultrasonic"},
    {label:"Flow",href:"/dashboard/report/flow"},
  ]},
  {label:"Notification",href:"dashboard/notification",items:[],icon:"bell"},
  {label:"Settings",href:"dashboard/settings",items:[],icon:"gear"},
  {label:"Profile",href:"dashboard/profile",items:[],icon:"user"},
]

const {displayed} = Astro.props
---
<nav>
  <div class="menu-header">
    <div style="display: flex;gap: 0.2rem;">
    {displayed || (
      <side-menu>
        <template>
          <button class="side-button" aria-expanded="false">
            <span class="sr-only">Menu</span>
            <Icon icon="list" />
          </button>
        </template>
      </side-menu>)}
      <a href="/" class="site-title">
      <Icon icon="terminal-window" color="var(--accent-regular)" size="2em" gradient />
        Rotalindo
      </a>
    </div>
    <menu-button>
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>
  </div>
  <div id="menu-content">
    <ul class="nav-items">
      {pageList.map(({label,href})=>{
      return (
      <li>
        <a href={href} aria-current={Astro.url.pathname === href} 						
          class:list={[
            'link',
            {
              active:
                Astro.url.pathname === href ||
                (href !== '/' && Astro.url.pathname.startsWith(href)),
            },
          ]}
        >
        {label}
        </a>
      </li>
      )})}
    </ul>
    <div class="menu-footer">
      <div class="socials">
        {iconList.map(({label,href,icon})=>{return(
          <a href={href} class="social">
            <span class="sr-only">{label}</span>
            <Icon icon={icon}/>
          </a>
        )})}
      </div>
      <div class="theme-toggle">
        <ThemeTogle/>
      </div>
    </div>
  </div>
</nav>
{displayed || (
<aside id="sidebar">
  <div class="side-menu">
    <ul class="side-items">
      {sideList.map(({label,href,items,icon})=>{
      return (
      <li>
        {items.length == 0 ? (
        <a href={href} aria-current={Astro.url.pathname === href} class='side-link'>
          <Icon icon={icon}/>
          <span style="margin-right: 2rem;">{label}</span>
        </a>
        ) : (
        <side-button>
          <button class="side-link button-link">
            <Icon icon={icon}/>
            <span>{label}</span>
            <div style="margin-left: auto;">
              <Icon icon={"down"}/>
            </div>
          </button>
          <ul class="dropdown-items" style="padding-left: 1.5rem;">
            {items.map(e=>(<li><a href={e.href} aria-current={Astro.url.pathname === href} class="side-link">{e.label}</a></li>))}
          </ul>
        </side-button>
        )
        }
      </li>
      )})}
    </ul>
  </div>
</aside>
)}
<script>
	class SideButton extends HTMLElement {
		constructor() {
			super();

			const btn = this.querySelector('button')!;
      const list = this.querySelector('ul')!;

      list.hidden = true;

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				list.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(list.hidden));
		}
	}
	class MenuButton extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;

			// Hide menu (shown by default to support no-JS browsers).
			const menu = document.getElementById('menu-content')!;
			menu.hidden = true;

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
	class SideMenu extends HTMLElement {
		constructor() {
			super();

			// Inject menu toggle button when JS runs.
			this.appendChild(this.querySelector('template')!.content.cloneNode(true));
			const btn = this.querySelector('button')!;
      const menu = document.querySelector('aside')!;
			menu.hidden = true;

			/** Set whether the menu is currently expanded or collapsed. */
			const setExpanded = (expand: boolean) => {
				btn.setAttribute('aria-expanded', expand ? 'true' : 'false');
				menu.hidden = !expand;
			};

			// Toggle menu visibility when the menu button is clicked.
			btn.addEventListener('click', () => setExpanded(menu.hidden));

			// Hide menu button for large screens.
			const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
				setExpanded(e.matches);
				btn.hidden = e.matches;
			};
			const mediaQueries = window.matchMedia('(min-width: 50em)');
			handleViewports(mediaQueries);
			mediaQueries.addEventListener('change', handleViewports);
		}
	}
  customElements.define('side-menu', SideMenu);
  customElements.define('side-button', SideButton);
	customElements.define('menu-button', MenuButton);
</script>
<style>
	nav {
		z-index: 9999;
		position: fixed;
    top: 0;
    width: 100%;
    padding: 0.75rem;
		font-family: var(--font-brand);
		font-weight: 500;
		margin-bottom: 3.5rem;
    background: var(--gray-900);
    border-bottom: solid 0.4px var(--gray-700);
	}

	.menu-header {
		display: flex;
		justify-content: space-between;
		gap: 0.5rem;
		padding: 0.25rem;
	}

	.site-title {
    font-size: var(--text-lg);
		display: flex;
		gap: 0.5rem;
		align-items: center;
		line-height: 1.1;
		color: var(--gray-0);
		text-decoration: none;
	}

	.menu-button {
		position: relative;
		display: flex;
		border: 0;
		border-radius: 999rem;
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
		box-shadow: var(--shadow-md);
	}

	.side-button {
		position: relative;
		display: flex;
		border: 0;
		padding: 0.5rem;
		font-size: 1.5rem;
		color: var(--gray-300);
		background: transparent;
    cursor: pointer;
	}

	.side-button[hidden] {
		display: none;
	}

	.menu-button[hidden] {
		display: none;
	}

	.menu-button::before {
		position: absolute;
		inset: -1px;
		content: '';
		background: var(--gradient-stroke);
		border-radius: 999rem;
		z-index: -1;
	}

	#menu-content {
		position: absolute;
		left: 0;
		right: 0;
    top: 5rem;
	}

	.nav-items {
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: 1rem;
		font-size: var(--text-md);
		line-height: 1.2;
		list-style: none;
		padding: 2rem;
		background-color: var(--gray-999);
		border-bottom: 1px solid var(--gray-800);
	}

	.link {
		display: inline-block;
		color: var(--gray-300);
		text-decoration: none;
	}

	.link.active {
		color: var(--gray-0);
	}
	.side-link {
		display: flex;
    gap: 0.5rem;
    align-items: center;
		color: var(--gray-100);
		text-decoration: none;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    transition: color var(--theme-transition), background-color var(--theme-transition);
	}

	.menu-footer {
		--icon-size: var(--text-xl);
		--icon-padding: 0.5rem;

		display: flex;
		justify-content: space-between;
		gap: 0.75rem;
		padding: 1.5rem 2rem 1.5rem 1.5rem;
		background-color: var(--gray-999);
		border-radius: 0 0 0.75rem 0.75rem;
		box-shadow: var(--shadow-lg);
	}

	.socials {
		display: flex;
		flex-wrap: wrap;
		gap: 0.625rem;
		font-size: var(--icon-size);
	}

	.social {
		display: flex;
		padding: var(--icon-padding);
		text-decoration: none;
		color: var(--gray-0);
		transition: color var(--theme-transition);
	}

	.social:hover,
	.social:focus {
		color: var(--accent-regular);
	}

	.theme-toggle {
		display: flex;
		align-items: center;
		height: calc(var(--icon-size) + 2 * var(--icon-padding));
	}
  aside {
    position:fixed;
    top: 0;
    left: 0;
    z-index: 20;
    display: flex;
    flex-direction: column;
    height: 100vh;
    padding: 6rem 2rem 3rem 0;
    background: var(--gray-900);
  }

	aside[hidden] {
		display: none;
	}

  aside ul{
    padding-left: 1rem;
  }
  .search-bar{
    position:relative;
    width: 10rem;
    
  }
  .side-menu {
    position: relative;
    display: flex;
    flex-direction: column;
  }
  .button-link {
    background: none;
    border: none;
    width: 100%;
    font-size: 1rem;
  }
	@media (min-width: 50em) {
		nav {
			display: grid;
			grid-template-columns: 1fr auto 1fr;
			align-items: center;
			padding: 0.75rem 1.25rem;
			gap: 1rem;
		}

		.menu-header {
			padding: 0;
		}

		#menu-content {
			display: contents;
		}

		.nav-items {
			position: relative;
			flex-direction: row;
			font-size: var(--text-sm);
			border-radius: 999rem;
			border: 0;
			padding: 0.5rem 0.5625rem;
			background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
			box-shadow: var(--shadow-md);
		}

		.nav-items::before {
			position: absolute;
			inset: -1px;
			content: '';
			background: var(--gradient-stroke);
			border-radius: 999rem;
			z-index: -1;
		}

		.link {
			padding: 0.5rem 1rem;
			border-radius: 999rem;
			transition: color var(--theme-transition), background-color var(--theme-transition);
		}

		.link:hover,
		.link:focus {
			color: var(--gray-100);
			background-color: var(--accent-subtle-overlay);
		}

		.link.active {
			color: var(--accent-text-over);
			background-color: var(--accent-regular);
		}

		.side-link:hover,
		.side-link:focus {
			color: var(--gray-100);
			background-color: var(--gray-700);
		}

		.menu-footer {
			--icon-padding: 0.375rem;

			justify-self: flex-end;
			align-items: center;
			padding: 0;
			background-color: transparent;
			box-shadow: none;
		}

		.socials {
			display: none;
		}
	}

	@media (min-width: 60em) {
		.socials {
			display: flex;
			justify-content: flex-end;
			gap: 0;
		}
	}
	@media (forced-colors: active) {
		.link.active {
			color: SelectedItem;
		}
	}
</style>
